class Solution(object): #O(n^2), O(n) ei osanud teha
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        len_nums = len(nums) # Set the length of the list so it doesnt have to be calculated every time
        if len_nums < 2  or len_nums > 100000: # Check if the length of the list is within the limits
            return
        answer = [] # Create a list for the answer
        for i in range(len_nums): # Loop through the list
            if nums[i] < -30 or nums[i] > 30: # Check if the number is within the limits
                print(nums[i])
                return
            temp_nums = nums[:i] + nums[i+1:] # Create a temporary list without the current number
            #print(temp_nums) #DEBUG
            answer_nr = 1
            for x in temp_nums: #Loop through temp_nums and multiply the numbers
                answer_nr *= x
            answer.append(answer_nr)
        return answer
        
#Test
print(Solution().productExceptSelf([1,2,3,4])) # [24,12,8,6]
print(Solution().productExceptSelf([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])) # [265252859812191058636308480000000, 132626429906095529318154240000000, 88417619937397019545436160000000, 66313214953047764659077120000000, 53050571962438211727261696000000, 44208809968698509772718080000000, 37893265687455865519472640000000, 33156607476523882329538560000000, 29472539979132339848478720000000, 26525285981219105863630848000000, 24113896346562823512391680000000, 22104404984349254886359040000000, 20404066139399312202792960000000, 18946632843727932759736320000000, 17683523987479403909087232000000, 16578303738261941164769280000000, 15603109400717121096253440000000, 14736269989566169924239360000000, 13960676832220582033489920000000, 13262642990609552931815424000000, 12631088562485288506490880000000, 12056948173281411756195840000000, 11532733035312654723317760000000, 11052202492174627443179520000000, 10610114392487642345452339200000, 10202033069699656101396480000000, 9824179993044113282826240000000, 9473316421863966379868160000000, 9146650338351415815045120000000, 8841761993739701954543616000000]

